diag(4)
df<-rbind(columns,rows)
print(df)
## saving file as csv
save(df,file="df.csv")
## saving df as Rdata
save(df,file="df.Rdata")
## saving file as csv
save(df,file="df.csv")
##writing file
write.csv(df,'df1.csv' ,row.names=FALSE)
View(df)
View(rows)
View(v)
View(w)
View(z)
View(df)
load("C:/Users/abhij/Desktop/t/TY/PSE/PSE_R/.RData")
load("C:/Users/abhij/Desktop/t/TY/PSE/PSE_R/df.Rdata")
load("C:/Users/abhij/Desktop/t/TY/PSE/PSE_R/df.Rdata")
View(df)
View(df)
View(df)
library(readr)
df1 <- read_csv("df1.csv")
View(df1)
View(df1)
#6. reading datasets and creating dataframes ####
df<- read.csv("C:/Users/abhij/Desktop/t/TY/PSE/csv file.csv")
View(df)
columns <- c('Name','Mis', 'Branch' ,'Year')
r1<-c("Abhijeet",111909002
,"Instru", "TY")
r2<-c("Shreyash",111907031,"Extc","TY")
r3<-c("Aaradhya",111909001,"Instru","SY")
rows<-rbind(r1,r2,r3)
print(rows)
df<-rbind(columns,rows)
print(df)
## saving df as Rdata
save(df,file="df.Rdata")
## saving file as csv
save(df,file="df.csv")
##writing file
write.csv(df,'df1.csv' ,row.names=FALSE, columns.names=FALSE)
library(readr)
df1 <- read_csv("df1.csv")
View(df1)
df1=read.csv("df1.csv")
View(df1)
# Clear R workspace####
rm(list = ls() )
2+2
288*122
12/3
12\3  # won't work
12%3  # won't work
2^3
2**3
###2. logical operations   ####
2> 3
3< 4
3<= 4
4>= 5
7==6
7!= 8
-3== ~3
a= ~3
print(a)
typeof(3)
7~=8   # won't work
####3. assigning variables ####
a= 3
b<-4
typeof(a)
typeof(b)
c=a+b
d=sin(a)*cos(b)
###4. writing functions and equations and their plots ####
x= seq(-10,10,0.1)
y=seq(-10,10,0.1)
plot(x,y)
z=a*x^2 +b*x +c
plot(z)
plot(z,
col= 'blue',
xlim=c(0,200),
ylim= c(0, 300) )
w= a*exp(x)
plot(w,col='red',type='l')
# use of 'c'
x<- c(1,2,3,4,5,6,7,8,9)  # sequence
print(x)
# use of 'matrix'
nrow=3
ncol=3
y<- matrix(x, nrow, ncol, byrow=TRUE) # prints matrix elements by row
print(y)
## column concatination
x= c(2, 3, 4 ) ;
y=c( 4,5,6)
z=cbind(x,y)
print(z)
## row concatination
w=cbind(t(x),t(y))
print(w)
v=rbind(x,y)
print(v)
# use of t(), diag(),
## transpose
print(t(z))
## diagonal matrix
diag(4)
#6. reading datasets and creating dataframes ####
df<- read.csv("C:/Users/abhij/Desktop/t/TY/PSE/csv file.csv")
View(df)
columns <- c('Name','Mis', 'Branch' ,'Year')
r1<-c("Abhijeet",111909002
,"Instru", "TY")
r2<-c("Shreyash",111907031,"Extc","TY")
r3<-c("Aaradhya",111909001,"Instru","SY")
rows<-rbind(r1,r2,r3)
print(rows)
df<-rbind(columns,rows)
print(df)
## saving df as Rdata
save(df,file="df.Rdata")
## saving file as csv
save(df,file="df.csv")
##writing file
write.csv(df,'df1.csv' ,row.names=FALSE, columns.names=FALSE)
df1=read.csv("df1.csv")
View(df1)
load("C:/Users/abhij/Desktop/t/TY/PSE/PSE_R/pc0.R")
libbrary(gggraph)
libbrary(ggraph)
library(ggplot)
install.packages('ggraph')
##
library(ggraph)
ggraph(hs_graph) +
geom_edge_link() +
geom_node_point()
#> Using `stress` as default layout
ggraph(hs_graph, layout = "drl") +
geom_edge_link() +
geom_node_point()
#> Using `stress` as default layout
ggraph(hs_graph, layout = "drl") +
geom_edge_link() +
geom_node_point()
# practice code 2 : Basic Statistics
#1. creating vector and finding sample length
v= sample(x=0:50 , size=1000 , replace=TRUE)
n=length(v)
# practice code 2 : Basic Statistics
#1. creating vector and finding sample length
X= sample(x=0:50 , size=1000 , replace=TRUE)
n=length(X)
# practice code 2 : Basic Statistics
#1. creating vector and finding sample length
X= sample(x=0:50 , size=1000 , replace=TRUE)
n=length(X)
print(X)
mean(X)
median(X)
mode(X)
mean(X ,trim=0.20)
var(X)
sd(X)
se<- sd(X)/sqrt(n) # standar error
min(X)
max(X)
range(X)
quantile(X,c(0.25,0.5,0.75))
IQR(n)
IQR(X)
#2. mean ,median , mode , std, varience ,
plot(x)
#2. mean ,median , mode , std, varience ,
plot(X)
#2. mean ,median , mode , std, varience ,
plot(pdf(X))
#2. mean ,median , mode , std, varience ,
plot(pdf(X), xlim=c(0,50))
#2. mean ,median , mode , std, varience ,
plot(pdf(X), xlim=c(0,50),ylim=c(0,50))
#2. mean ,median , mode , std, varience ,
plot(pdf(X), xlim=c(0,50),ylim=c(0,50))
pdf(x)
pdf(X)
# practice code 2 : Basic Statistics
#1. creating vector and finding sample length
X= sample(x=0:50 , size=1000 , replace=TRUE)
n=length(X)
print(X)
m<-mean(X)
median(X)
mode(X)
mean(X ,trim=0.20)
var(X)
s<-sd(X)
se<- sd(X)/sqrt(n) # standar error
min(X)
max(X)
range(X)
quantile(X,c(0.25,0.5,0.75))
IQR(X)
dnorm(X,m,s)
plot(dnorm(X,m,s) ,-3, +3,
col= "green",
lwd= 5,
main= " Sandard Nornal Distribution",
xlab= "Z-score",
ylab= "Density")
plot(dnorm(X,m,s),
col= "green",
lwd= 5,
main= " Sandard Nornal Distribution",
xlab= "Z-score",
ylab= "Density")
plot(dnorm(X,m,s),
col= "green",
lwd= 5,
main= " Sandard Nornal Distribution",
xlab= "Z-score",
ylab= "Density")
plot(dnorm(X,m,s),xlim=c(-3,3),ylim=c(0,1.5)
col= "green",
lwd= 5,
main= " Sandard Nornal Distribution",
xlab= "Z-score",
ylab= "Density")
plot(dnorm(X,m,s),xlim=c(-3,3),ylim=c(0,1.5),
col= "green",
lwd= 5,
main= " Sandard Nornal Distribution",
xlab= "Z-score",
ylab= "Density")
# Clear R workspace####
rm(list = ls() )
# import data and EDA ####
df=read.csv("bollywood.csv")
head(df)
summary(df)
plot(df)
View(df)
dim(df)
#1. plotting Histogram####
hist(df$BoxOfficeCollection ,
main="box office collection",
xlab="In crore.",
col="skyblue")
#2. plotting pie chart####
count<-table(df$Genre)
View(count )
pie(count, col=rainbow(7),radius=1)
View(df)
#3. plotting bar graph####
sliced_movies<-df[1:20 ,]
View(sliced_movies)
#View(sliced_movies)
barplot(sliced_movies$YoutubeViews)
#4. plotting scattor plot####
plot(x=df$BoxOfficeCollection,y=df$Budget,
col="orange",
type="p")
#4. plotting scattor plot####
plot(x=df$BoxOfficeCollection,y=df$Budget,
col="orange",
type="p",
xlim=c(0,300))
#View(sliced_movies)
barplot(sliced_movies$YoutubeViews , col="green")
# Clear R workspace####
rm(list = ls() )
# import data and EDA ####
df=read.csv("bollywood.csv")
head(df)
summary(df)
plot(df)
dim(df)
#1. plotting Histogram####
hist(df$BoxOfficeCollection ,
main="box office collection",
xlab="In crore.",
col="skyblue")
#2. plotting pie chart####
count<-table(df$Genre)
pie(count, col=rainbow(7),radius=1)
#3. plotting bar graph####
sliced_movies<-df[1:20 ,]
#View(sliced_movies)
barplot(sliced_movies$YoutubeViews , col="green")
#4. plotting scattor plot####
plot(x=df$BoxOfficeCollection,y=df$Budget,
col="orange",
type="p",
xlim=c(0,300))
install.packages("rtools")
# Clear R workspace####
rm(list = ls() )
## import data and EDA ####
df=read.csv("bollywood.csv")
view(df)
View(df)
#1. use of filter
first10 <-filter(df[1:10])
#1. use of filter
first10 <-filter(df[1:10],)
#1. use of filter
first10 <-filter(df[1:10 ,])
library(dplyr)
#1. use of filter
first10 <-filter(df[1:10 ,])
View(first10)
comedy_movies <-filter(df$Genre=="Comedy")
comedy_movies <-filter(df.Genre=="Comedy")
comedy_movies <-filter(df, Genre=="Comedy")
View(comedy_movies)
romcom_movies <-filter(df, Genre%inc%c("Comedy","Romance"))
romcom_movies <-filter(df, Genre%in%c("Comedy","Romance")
View(romcom_movies)
View(romcom_movies)
romcom_movies <-filter(df, Genre%in%c("Comedy","Romance"))
View(romcom_movies)
#2 use of arrange
expensiveMovies <- arrange(df ,desc(Budget))
View(expensiveMovies)
youtubedata <- select(df, MovieName ,Genre,YoutubeViews ,YoutubeLikes)
View(youtubedata)
#3 use of rename
dfy<-rename(df,YoutubeLikes="Yt_likes" )
#3 use of rename
dfy<-rename(df,Ytlikes="YoutubeLikes" )
View(dfy)
#4 use of mutate
dfy1 <- mutate(df,YoutubeImpression= YoutubeLikes-YoutubeDisikes)
#4 use of mutate
dfy1 <- mutate(df,YoutubeImpression= YoutubeLikes-YoutubeDislikes)
View(dfy1)
class(2+5i)
# use of 'c'
x<- c(1,2,3,4,5,6,7,8,9)  # sequence
y<- matrix(x, nrow, ncol, byrow=TRUE) # prints matrix elements by row
# use of 'matrix'
nrow=3
ncol=3
y<- matrix(x, nrow, ncol, byrow=TRUE) # prints matrix elements by row
print(y)
columns <- c('Name','Mis', 'Branch' ,'Year')
r1<-c("Abhijeet",111909002
,"Instru", "TY")
r2<-c("Shreyash",111907031,"Extc","TY")
r3<-c("Aaradhya",111909001,"Instru","SY")
rows<-rbind(r1,r2,r3)
print(rows)
df<-rbind(columns,rows)
print(df)
library(ggplot2)
plot(df)
library(dplyr)
## import data and EDA ####
df=read.csv("bollywood.csv")
View(df)
plot(df)
library(ggplot2)
View(dfy)
View(df)
ggplot( data= df, mapping = aes(x= Budget ,y= YoutubeLikes) +geom_point())
ggplot( data= df, mapping = aes(x= Budget ,y= YoutubeLikes)) +geom_point())
ggplot( data= df, mapping = aes(x= Budget ,y= YoutubeLikes)) +geom_point()
ggplot( data= df, mapping = aes(x= Budget ,y= YoutubeLikes)) +geom_boxplot()
# Clear R workspace####
rm(list = ls() )
##1. creating vector and finding sample length####
X= sample(x=0:50 , size=1000 , replace=TRUE)
n=length(X)
View(X)
m<-mean(X) ;m
median(X)
mode(X)
mean(X ,trim=0.20)
var(X)
s<-sd(X) ; s
####3. finding standard error , min , max, range , quartile range , IQR####
se<- sd(X)/sqrt(n) # standar error
min(X)
max(X)
range(X)
quantile(X,c(0.25,0.5,0.75))
IQR(X)
###4. ploting frequency polygon####
xlen=seq(0,50,length.out=1000)
plot(xlen,X,type="l")
polygon(c(-1,xlen,50),c(0,X,0),col="red")
##5. ploting distribution curve of created random sample data ####
X=X[order(X)]  # sorting X in ascending order
View(X)
d=dnorm(X,m,s)
View(d)
plot(xlen,d,
type="l",
col= "blue",
lwd= 1,
main= " Sandard Nornal Distribution",
xlab= "Z-score",
ylab= "Density" )
# Clear R workspace####
rm(list = ls() )
## import data and EDA ####
df=read.csv("bollywood.csv")
head(df)
summary(df)
plot(df)
View(df)
dim(df)
###1. plotting Histogram####
hist(df$BoxOfficeCollection ,
main="box office collection",
xlab="In crore.",
col="skyblue")
####2. plotting pie chart####
count<-table(df$Genre)
View(count )
pie(count, col=rainbow(7),radius=1)
###3. plotting bar graph####
sliced_movies<-df[1:20 ,]
#View(sliced_movies)
barplot(sliced_movies$YoutubeViews , col="green")
##4. plotting scattor plot####
plot(x=df$BoxOfficeCollection,y=df$Budget,
col="orange",
type="p",
xlim=c(0,300))
# Clear R workspace####
rm(list = ls() )
2+2
288*122
12/3
12\3  # won't work
12%3  # won't work
2^3
2**3
class(2+5i)
typeof("")
###2. logical operations   ####
2> 3
3< 4
3<= 4
4>= 5
7==6
7!= 8
-3== ~3
a= ~3
print(a)
typeof(3)
7~=8   # won't work
####3. assigning variables ####
a= 3
b<-4
typeof(a)
typeof(b)
c=a+b
d=sin(a)*cos(b)
###4. writing functions and equations and their plots ####
x= seq(-10,10,0.1)
y=seq(-10,10,0.1)
plot(x,y)
z=a*x^2 +b*x +c
plot(z)
plot(z,
col= 'blue',
xlim=c(0,200),
ylim= c(0, 300) )
w= a*exp(x)
plot(w,col='red',type='l')
# use of 'c'
x<- c(1,2,3,4,5,6,7,8,9)  # sequence
print(x)
# use of 'matrix'
nrow=3
ncol=3
y<- matrix(x, nrow, ncol, byrow=TRUE) # prints matrix elements by row
print(y)
## column concatination
x= c(2, 3, 4 ) ;
y=c( 4,5,6)
z=cbind(x,y)
print(z)
## row concatination
w=cbind(t(x),t(y))
print(w)
v=rbind(x,y)
print(v)
# use of t(), diag(),
## transpose
print(t(z))
## diagonal matrix
diag(4)
#6. reading datasets and creating dataframes ####
df<- read.csv("C:/Users/abhij/Desktop/t/TY/PSE/csv file.csv")
View(df)
columns <- c('Name','Mis', 'Branch' ,'Year')
r1<-c("Abhijeet",111909002
,"Instru", "TY")
r2<-c("Shreyash",111907031,"Extc","TY")
r3<-c("Aaradhya",111909001,"Instru","SY")
data-
data()
data()
View(emptycars)
